openapi: 3.0.0
info:
  title: ServiceNow API
  description: ServiceNow API
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/servicenow-api
servers:
  - url: https://api.oregonstate.edu/v1
security:
  - OAuth2:
      - full
paths:
  /servicenow/colleges:
    get:
      summary: Get colleges
      tags:
        - colleges
      description: Get college results
      operationId: getColleges
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollegeSetResult'
        '500':
          $ref: '#/components/responses/500'
  /servicenow/common-matching:
    get:
      summary: Get common matching routine results
      tags:
        - common-matching
      description: Get common matching results
      operationId: getCommonMatching
      parameters:
        - in: query
          name: filter[lastName]
          description: Last name of person to match
          required: true
          schema:
            type: string
        - in: query
          name: filter[firstName]
          description: First name of person to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[middleName]
          description: Middle name of person to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[streetLine1]
          description: First line of the address to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[city]
          description: City of the address to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[stateCode]
          description: State code of the address to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[zip]
          description: Zip code of the address to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[nationCode]
          description: Nation/Country code of the address to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[ssn]
          description: Social Security Number, Social Insurance Number or Tax Identification Number to match
          required: false
          schema:
            type: string
        - in: query
          name: filter[birthDay]
          description: Day of birth to match
          required: false
          schema:
            type: string
            pattern: '^\d{2}$'
        - in: query
          name: filter[birthMonth]
          description: Month of birth to match
          required: false
          schema:
            type: string
            pattern: '^\d{2}$'
        - in: query
          name: filter[birthYear]
          description: Year of birth to match
          required: false
          schema:
            type: string
            pattern: '^\d{4}$'
        - in: query
          name: filter[sex]
          description: Gender to match. M - Male, F - Female, N - Unknown
          required: false
          schema:
            type: string
            enum: [M, F, N]
        - in: query
          name: filter[email]
          description: The e-mail address to match
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonMatchingSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /servicenow/employees:
    post:
      summary: Create an employee
      tags:
        - employees
      description: Create an employee
      operationId: postEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeePostBody'
        description: Post body for an employee
        required: true
      responses:
        '201':
          description: Successfully create an employee data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResult'
        '400':
          $ref: '#/components/responses/400'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /servicenow/employees/{osuId}:
    get:
      summary: Get employee by ID
      tags:
        - employees
      description: Get employee by ID
      operationId: getEmployeeById
      parameters:
        - $ref: '#/components/parameters/osuId'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResult'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update employee by ID
      tags:
        - employees
      description: Update employee by ID
      operationId: patchEmployeeById
      parameters:
        - $ref: '#/components/parameters/osuId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeePatchBody'
        description: Patch body for an employee
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResult'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
  /servicenow/jobs:
    post:
      summary: Create job
      tags:
        - jobs
      description: Create job
      operationId: postJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPostBody'
        description: Post body for an job
        required: true
      responses:
        '202':
          description: The backend data source needs to do additional processing with the
            new job record. Job record accepted but not yet created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    osuId:
      name: osuId
      in: path
      required: true
      description: OSU ID of a person
      schema:
        type: string
        pattern: ^\d{9}$
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          scopes:
            full: Full access to the API
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    CollegeType:
      type: string
      enum: [college]
    CommonMatchingType:
      type: string
      enum: [common-matching]
    EmployeeType:
      type: string
      enum: [employee]
    JobType:
      type: string
      enum: [job]
    SelfLink:
      properties:
        self:
          type: string
          format: uri
          description: Self-link of current resource
    CollegeResource:
      properties:
        id:
          type: string
          description: A unique ID of college
        type:
          $ref: '#/components/schemas/CollegeType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          properties:
            code:
              type: string
              description: College code
              example: '123456'
            description:
              type: string
              description: College description
              example: Oregon State University
            admissionCode:
              type: string
              description: Required admissions request code associated with source/background institution
              example: '1234'
            city:
              type: string
              description: The city associated with source/background institution
              example: Corvallis
            state:
              type: string
              description: The state associated with source/background institution
              example: Oregon
            country:
              type: string
              description: The country associated with source/background institution
              example: United States of America
            zip:
              type: string
              description: The zip code associated with source/background institution
              example: 12345-6789
    CollegeSetResult:
      properties:
        links:
          allOf:
            - $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/CollegeResource'
    CommonMatchingResource:
      properties:
        id:
          type: string
          description: A unique ID of common matching result
        type:
          $ref: '#/components/schemas/CommonMatchingType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          properties:
            osuId:
              type: string
              description: Matched OSU ID if any
              pattern: '^\d{9}$'
              example: '987654321'
            matchingInd:
              type: string
              description: |
                Matching indicator.
                M - Match, N - No Match, S - Suspended because multiple matches.
              enum: [M, N, S]
              example: M
    CommonMatchingSetResult:
      properties:
        links:
          allOf:
            - $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/CommonMatchingResource'
    EmployeeResource:
      type: object
      properties:
        id:
          type: string
          description: OSU ID of a employee
          pattern: ^\d{9}$
        type:
          $ref: '#/components/schemas/EmployeeType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          properties:
            pidm:
              type: string
              description: Internal ID of an employee
              example: '1234'
            lastName:
              type: string
              description: Last name of an employee
              example: Doe
            middleName:
              type: string
              description: Middle name of an employee
              example: Jackson
            firsName:
              type: string
              description: First name of an employee
              example: Jon
            ssn:
              type: string
              description: Social security number of an employee
              example: '123456789'
            firstHireDate:
              type: string
              format: date
              description: The date this employee was first hired. Format is 'YYYY-MM-DD'.
              example: '1970-07-08'
            currentHireDate:
              type: string
              format: date
              description: The date this employee was currently hired. Format is 'YYYY-MM-DD'.
              example: '1970-07-08'
            adjustedServiceDate:
              type: string
              format: date
              description: The date this employee service adjusted. Format is 'YYYY-MM-DD'.
              example: '1970-07-08'
            seniorityDate:
              type: string
              format: date
              description: The seniority date of the employee. Format is 'YYYY-MM-DD'.
              example: '1970-07-08'
            firstWorkDate:
              type: string
              format: date
              description: The date this employee first worked. Format is 'YYYY-MM-DD'.
              example: '1970-07-08'
            birthDate:
              type: string
              format: date
              description: The date this employee was last modified. Format is 'YYYY-MM-DD'.
              example: '1970-07-08'
            sex:
              type: string
              description: Gender of an employee. M - Male, F - Female, N - Unknown.
              enum: [M, F, N]
            citizenship:
              type: string
              description: Citizenship code of an employee
              example: C
            legalName:
              type: string
              description: Legal name of an employee
              example: Jon Jackson Doe
            emails:
              type: object
              properties:
                employeeEmail:
                  type: string
                  format: email
                  description: Employee email of an employee
                  example: 'john.doe@oregonstate.edu'
                onidEmail:
                  type: string
                  format: email
                  description: ONID email of an employee
                  example: 'doej@oregonstate.edu'
            address:
              type: object
              properties:
                streetLine1:
                  type: string
                  description: Street line 1 the address
                streetLine2:
                  type: string
                  description: Street line 2 the address
                city:
                  type: string
                  description: City name of the address
                  example: Corvallis
                stateCode:
                  type: string
                  description: State code of the address
                  example: OR
                nationCode:
                  type: string
                  description: Nation code of the address
                  example: US
                zip:
                  type: string
                  description: Zip code of the address
                  example: '97330'
            telephone:
              type: string
              description: Telephone number of an employee
              example: '5411234567'
            status:
              type: string
              description: Employee status
              example: A
            employeeClass:
              type: string
              description: Employee class
              example: CA
            positionNumber:
              type: string
              description: Position number of an employee
              example: C99999
            jobTitle:
              type: string
              description: Job title of an employee
              example: Analyst Programmer
            timesheetOrganization:
              type: object
              properties:
                code:
                  type: string
                  description: Organization code of the employee's timesheet organization
                  example: '888888'
                description:
                  type: string
                  description: Organization description of the employee's timesheet organization
                  example: 'JIS - Enterprise Computing Services'
            homeOrganization:
              type: object
              properties:
                code:
                  type: string
                  description: Organization code of the employee's home organization
                  example: '888888'
                description:
                  type: string
                  description: Organization description of the employee's home organization
                  example: 'JIS - Enterprise Computing Services'
    EmployeeResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/EmployeeResource'
    EmployeePostBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/EmployeeType'
            attributes: &EmployeeAttributesPacket
              type: object
              additionalProperties: false
              properties:
                lastName:
                  type: string
                  description: Last name of an employee
                  example: Doe
                  nullable: true
                middleName:
                  type: string
                  description: Middle name of an employee
                  example: Jackson
                  nullable: true
                firstName:
                  type: string
                  description: First name of an employee
                  example: Jon
                  nullable: false
                legalName:
                  type: string
                  description: Legal name of an employee
                  example: Doe Jackson Jon
                  nullable: true
                address:
                  type: object
                  properties:
                    streetLine1:
                      type: string
                      description: Street line 1 the address
                      nullable: true
                    streetLine2:
                      type: string
                      description: Street line 2 the address
                      nullable: true
                    city:
                      type: string
                      description: City name of the address
                      example: Corvallis
                      nullable: true
                    stateCode:
                      type: string
                      description: State code of the address
                      example: OR
                      nullable: true
                    nationCode:
                      type: string
                      description: Nation code of the address
                      nullable: true
                      example: US
                      minLength: 1
                      maxLength: 3
                    zip:
                      type: string
                      description: Zip code of the address
                      example: '97330-3460'
                      nullable: true
                ssn:
                  type: string
                  description: Social security number of an employee
                  example: '123456789'
                  nullable: true
                appointmentDate:
                  type: string
                  format: date
                  description: The appointment date of the employee. Format is 'YYYY-MM-DD'.
                  example: '1970-07-08'
                  nullable: false
                birthDate:
                  type: string
                  format: date
                  description: The date this employee was last modified. Format is 'YYYY-MM-DD'.
                  example: '1970-07-08'
                  nullable: true
                telephone:
                  type: string
                  description: Telephone number of an employee
                  example: '5411234567'
                  nullable: false
                sex:
                  type: string
                  description: Gender of an employee. M - Male, F - Female, N - Unknown.
                  enum: [M, F, N]
                  nullable: true
                citizenship:
                  type: string
                  description: |
                    Citizenship code of an employee.
                      FN - Foreign National
                      N	- Non Resident Alien
                      R	- Resident Alien
                      S	- Substantial Presence Alien
                      C	- Citizen
                  enum: [FN, N, R, S, C]
                  nullable: true
                emails:
                  type: object
                  properties:
                    employeeEmail:
                      type: string
                      format: email
                      description: Employee email of an employee
                      example: 'john.doe@oregonstate.com'
                      nullable: true
                employeeClass:
                  type: string
                  description: Employee class
                  example: CA
                  nullable: true
                homeOrganization:
                  type: object
                  properties:
                    code:
                      type: string
                      description: Organization code of the employee's home organization
                      example: '888888'
                      nullable: true
    EmployeePatchBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
          additionalProperties: false
          properties:
            id:
              type: string
              description: OSU ID of a person
              example: '123456789'
              pattern: ^\d{9}$
            type:
              $ref: '#/components/schemas/EmployeeType'
            attributes: *EmployeeAttributesPacket
    JobResource:
      type: object
      properties:
        id:
          type: string
          description: A unique EPAF transaction number
        type:
          $ref: '#/components/schemas/JobType'
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          properties:
            epafTransactionNumber:
              type: string
              description: A unique EPAF transaction number
              example: '1234'
    JobResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/JobResource'
    JobPostBody:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
          additionalProperties: false
          properties:
            type:
              $ref: '#/components/schemas/JobType'
            attributes:
              type: object
              additionalProperties: false
              required:
                - osuId
                - positionNumber
                - suffix
              properties:
                osuId:
                  type: string
                  description: OSU ID of an employee
                  example: '123456789'
                  pattern: ^\d{9}$
                  nullable: false
                positionNumber:
                  type: string
                  description: The job position number
                  example: 'C12345'
                  nullable: false
                suffix:
                  type: string
                  description: The job suffix
                  example: '00'
                  nullable: false
                status:
                  type: string
                  description: The job status
                  example: 'A'
                eclsCode:
                  type: string
                  description: Employee class security code
                  example: 'TS'
                jobDescription:
                  type: string
                  description: Job description
                  example: Temp Bio Science Research Tech 1
                jblnDescription:
                  type: string
                  description: Job location description
                  example: California
                appointmentPercent:
                  type: integer
                  description: Job appointment percent
                  example: 100
                factor:
                  type: integer
                  description: Job factor
                  example: 12
                pays:
                  type: integer
                  description: Job pays
                  example: 12
                hoursPay:
                  type: number
                  format: float
                  description: Job hours pay
                  example: 173.33
                rate:
                  type: number
                  format: float
                  description: Job rate
                  example: 17.43
                fte:
                  type: number
                  format: float
                  description: Job FTE
                  example: 1.0
                supervisor:
                  type: object
                  properties:
                    positionNumber:
                      type: string
                      description: The supervisor's job position number
                      example: 'C12345'
                    suffix:
                      type: string
                      description: The supervisor's job suffix
                      example: '00'
                jobEffectiveDate:
                  type: string
                  format: date
                  description: Date that the Job Assignment record becomes effective. Format is 'YYYY-MM-DD'.
                  example: '1970-07-08'
                personnelChangeDate:
                  type: string
                  format: date
                  description: Date the change was actually made as opposed to the effective date which is for payroll purposes. Format is 'YYYY-MM-DD'.
                  example: '1970-07-08'
    ErrorObject:
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        code:
          type: string
          description: An application-specific error code
          example: '1234'
        detail:
          type: string
          description: A long description of the error that may contain instance-specific
            details
        links:
          properties:
            about:
              type: string
              format: uri
              description: A link to further information about the error
              example: https://developer.oregonstate.edu/documentation/error-reference#1234
    ErrorResult:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
